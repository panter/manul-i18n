{"version":3,"sources":["../src/translate_simple_schema.js"],"names":["i18n","SimpleSchema","schemaOrg","namespace","Error","schema","translations","t","console","log","_translateSchemaObject","parentFieldFullName","parentTranslation","objectKeys","forEach","fullFieldName","field","fieldTranslations","label","defaultTransform","value","fieldSchema","uniforms","transform","getDefinition","length","messageBox","messages","en"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;kBAEe;AAAA,MAAGA,IAAH,QAAGA,IAAH;AAAA,MAASC,YAAT,QAASA,YAAT;AAAA,SAA4B,UAACC,SAAD,EAAYC,SAAZ,EAA0B;AACnE,QAAI,CAACF,YAAL,EAAmB;AACjB,YAAM,IAAIG,KAAJ,CACJ,8DADI,CAAN;AAGD;AACD;AACA,QAAMC,SAAS,yBAAYH,SAAZ,CAAf;AACA;AACA,QAAMI,eAAeN,KAAKO,CAAL,CAAOJ,SAAP,CAArB;AACAK,YAAQC,GAAR,CAAYH,YAAZ;;AAEA,QAAMI,yBAAyB,SAAzBA,sBAAyB,GAG1B;AAAA,UAFHC,mBAEG,uEAFmB,IAEnB;AAAA,UADHC,iBACG,uEADiB,EACjB;;AACHP,aAAOQ,UAAP,CAAkBF,mBAAlB,EAAuCG,OAAvC,CAA+C,iBAAS;AACtD,YAAMC,gBAAgBJ,sBACfA,mBADe,SACQK,KADR,GAElBA,KAFJ;AAGA,YAAMC,oBAAoB,mBAAML,iBAAN,EAAyBI,KAAzB,CAA1B;AACA,YAAIE,QAAQ,IAAZ;AACA,YAAID,iBAAJ,EAAuB;AACrB,cAAI,wBAAWA,iBAAX,CAAJ,EAAmC;AACjCC,oBAAQD,iBAAR;AACD,WAFD,MAEO;AACLC,oBAAQD,kBAAkBC,KAA1B;AACD;AACF;AACD,YAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,iBAAS,mBAAMF,iBAAN,EAAyBG,KAAzB,EAAgCA,KAAhC,CAAT;AAAA,SAAzB;AACA;AACA,YAAMC,cAAchB,OAAOA,MAAP,CAAcU,aAAd,CAApB;AACA,8BAASM,WAAT,EAAsB;AACpBH,iBAAOA,SAAYf,SAAZ,SAAyBY,aADZ;AAEpBO;AACEC,uBAAWJ,gBADb;AAEEb,0BAAcW;AAFhB,aAGKf,UAAUsB,aAAV,CAAwBT,aAAxB,EAAuCO,QAH5C;AAFoB,SAAtB;AAQA;AACA,YAAIjB,OAAOQ,UAAP,CAAkBE,aAAlB,EAAiCU,MAAjC,GAA0C,CAA9C,EAAiD;AAC/Cf,iCAAuBK,aAAvB,EAAsCE,iBAAtC;AACD;AACD;;AAEA,YAAIZ,OAAOQ,UAAP,CAAqBE,aAArB,SAAwCU,MAAxC,GAAiD,CAArD,EAAwD;AACtDf,iCAA0BK,aAA1B,SAA6CE,iBAA7C;AACD;AACF,OAjCD;AAkCD,KAtCD;AAuCAP,2BAAuB,IAAvB,EAA6BJ,YAA7B;;AAEA;AACA;AACA;AACAD,WAAOqB,UAAP,CAAkBC,QAAlB,CAA2B;AACzBC,UAAI,4CAA0B5B,KAAKO,CAAL,CAAO,cAAP,CAA1B;AADqB,KAA3B;;AAIA,WAAOF,MAAP;AACD,GA7Dc;AAAA,C","file":"translate_simple_schema.js","sourcesContent":["import _ from 'lodash'\nimport evalSimpleSchemaRegexKeys from './eval_simpleschema_regex_keys'\n\nexport default ({ i18n, SimpleSchema }) => (schemaOrg, namespace) => {\n  if (!SimpleSchema) {\n    throw new Error(\n      'please provide SimpleSchema if you want to translate schemas'\n    )\n  }\n  // clone the schema\n  const schema = _.cloneDeep(schemaOrg)\n  // translate all the labels\n  const translations = i18n.t(namespace)\n  console.log(translations)\n\n  const _translateSchemaObject = (\n    parentFieldFullName = null,\n    parentTranslation = {}\n  ) => {\n    schema.objectKeys(parentFieldFullName).forEach(field => {\n      const fullFieldName = parentFieldFullName\n        ? `${parentFieldFullName}.${field}`\n        : field\n      const fieldTranslations = _.get(parentTranslation, field)\n      let label = null\n      if (fieldTranslations) {\n        if (_.isString(fieldTranslations)) {\n          label = fieldTranslations\n        } else {\n          label = fieldTranslations.label\n        }\n      }\n      const defaultTransform = value => _.get(fieldTranslations, value, value)\n      // we mutate now the schema\n      const fieldSchema = schema.schema(fullFieldName)\n      _.extend(fieldSchema, {\n        label: label || `${namespace}.${fullFieldName}`,\n        uniforms: {\n          transform: defaultTransform,\n          translations: fieldTranslations,\n          ...schemaOrg.getDefinition(fullFieldName).uniforms // can override default transform\n        }\n      })\n      // recursivly translate subobjects and subschemas\n      if (schema.objectKeys(fullFieldName).length > 0) {\n        _translateSchemaObject(fullFieldName, fieldTranslations)\n      }\n      // or if array\n\n      if (schema.objectKeys(`${fullFieldName}.$`).length > 0) {\n        _translateSchemaObject(`${fullFieldName}.$`, fieldTranslations)\n      }\n    })\n  }\n  _translateSchemaObject(null, translations)\n\n  // we do not use the locale feature of simpleschema (yet),\n  // instead we just add the right translations\n  // to the default locale (en) in messagebox\n  schema.messageBox.messages({\n    en: evalSimpleSchemaRegexKeys(i18n.t('simpleSchema'))\n  })\n\n  return schema\n}\n"]}