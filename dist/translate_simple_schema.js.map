{"version":3,"sources":["../src/translate_simple_schema.js"],"names":[],"mappings":";;;;;;;;;;sBAAc,QAAQ;;;;4CACgB,gCAAgC;;;;qBAEvD,UAAC,IAAsB;MAApB,IAAI,GAAN,IAAsB,CAApB,IAAI;MAAE,YAAY,GAApB,IAAsB,CAAd,YAAY;SAAO,UAAC,SAAS,EAAE,SAAS,EAAK;AACnE,QAAI,CAAC,YAAY,EAAE;AACjB,YAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;KACjF;;AAED,QAAM,MAAM,GAAG,oBAAE,SAAS,CAAC,SAAS,CAAC,CAAC;;AAEtC,QAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;;AAEvC,QAAM,sBAAsB,GAAG,SAAzB,sBAAsB,GAA2D;UAAvD,mBAAmB,yDAAG,IAAI;UAAE,iBAAiB,yDAAG,EAAE;;AAChF,YAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK,EAAK;AACxD,YAAM,aAAa,GAAG,mBAAmB,GAAM,mBAAmB,SAAI,KAAK,GAAK,KAAK,CAAC;AACtF,YAAM,iBAAiB,GAAG,oBAAE,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;AAC1D,YAAI,KAAK,GAAG,IAAI,CAAC;AACjB,YAAI,iBAAiB,EAAE;AACrB,cAAI,oBAAE,QAAQ,CAAC,iBAAiB,CAAC,EAAE;AACjC,iBAAK,GAAG,iBAAiB,CAAC;WAC3B,MAAM;AACL,iBAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;WACjC;SACF;AACD,YAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAG,KAAK;iBAAI,oBAAE,GAAG,CAAC,iBAAiB,EAAE,KAAK,EAAE,KAAK,CAAC;SAAA,CAAC;;AAEzE,YAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AACjD,4BAAE,MAAM,CAAC,WAAW,EAAE;AACpB,eAAK,EAAE,KAAK,IAAO,SAAS,SAAI,aAAa,AAAE;AAC/C,kBAAQ;AACN,qBAAS,EAAE,gBAAgB;AAC3B,wBAAY,EAAE,iBAAiB;aAC5B,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,QAAQ,CACnD;SACF,CAAC,CAAC;;;AAEH,YAAI,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AAC/C,gCAAsB,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;SAC1D;OACF,CAAC,CAAC;KACJ,CAAC;AACF,0BAAsB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;;;;;AAK3C,UAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,+CAA0B,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC;;AAGtF,WAAO,MAAM,CAAC;GACf;CAAA","file":"translate_simple_schema.js","sourcesContent":["import _ from 'lodash';\nimport evalSimpleSchemaRegexKeys from './eval_simpleschema_regex_keys';\n\nexport default ({ i18n, SimpleSchema }) => (schemaOrg, namespace) => {\n  if (!SimpleSchema) {\n    throw new Error('please provide SimpleSchema if you want to translate schemas');\n  }\n  // clone the schema\n  const schema = _.cloneDeep(schemaOrg);\n  // translate all the labels\n  const translations = i18n.t(namespace);\n\n  const _translateSchemaObject = (parentFieldFullName = null, parentTranslation = {}) => {\n    schema.objectKeys(parentFieldFullName).forEach((field) => {\n      const fullFieldName = parentFieldFullName ? `${parentFieldFullName}.${field}` : field;\n      const fieldTranslations = _.get(parentTranslation, field);\n      let label = null;\n      if (fieldTranslations) {\n        if (_.isString(fieldTranslations)) {\n          label = fieldTranslations;\n        } else {\n          label = fieldTranslations.label;\n        }\n      }\n      const defaultTransform = value => _.get(fieldTranslations, value, value);\n      // we mutate now the schema\n      const fieldSchema = schema.schema(fullFieldName);\n      _.extend(fieldSchema, {\n        label: label || `${namespace}.${fullFieldName}`,\n        uniforms: {\n          transform: defaultTransform,\n          translations: fieldTranslations,\n          ...schemaOrg.getDefinition(fullFieldName).uniforms, // can override default transform\n        },\n      });\n      // recursivly translate subobjects and subschemas\n      if (schema.objectKeys(fullFieldName).length > 0) {\n        _translateSchemaObject(fullFieldName, fieldTranslations);\n      }\n    });\n  };\n  _translateSchemaObject(null, translations);\n\n  // we do not use the locale feature of simpleschema (yet),\n  // instead we just add the right translations\n  // to the default locale (en) in messagebox\n  schema.messageBox.messages({ en: evalSimpleSchemaRegexKeys(i18n.t('simpleSchema')) });\n\n\n  return schema;\n};\n"]}