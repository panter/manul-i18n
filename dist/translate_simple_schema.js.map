{"version":3,"sources":["../src/translate_simple_schema.js"],"names":["i18n","SimpleSchema","schemaOrg","namespace","Error","schema","translations","t","_translateSchemaObject","parentFieldFullName","parentTranslation","objectKeys","forEach","field","fullFieldName","fieldTranslations","label","defaultTransform","value","fieldSchema","uniforms","transform","getDefinition","length","messageBox","messages","en"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;kBAEe;AAAA,MAAGA,IAAH,QAAGA,IAAH;AAAA,MAASC,YAAT,QAASA,YAAT;AAAA,SAA4B,UAACC,SAAD,EAAYC,SAAZ,EAA0B;AACnE,QAAI,CAACF,YAAL,EAAmB;AACjB,YAAM,IAAIG,KAAJ,CAAU,8DAAV,CAAN;AACD;AACD;AACA,QAAMC,SAAS,yBAAYH,SAAZ,CAAf;AACA;AACA,QAAMI,eAAeN,KAAKO,CAAL,CAAOJ,SAAP,CAArB;;AAEA,QAAMK,yBAAyB,SAAzBA,sBAAyB,GAAwD;AAAA,UAAvDC,mBAAuD,uEAAjC,IAAiC;AAAA,UAA3BC,iBAA2B,uEAAP,EAAO;;AACrFL,aAAOM,UAAP,CAAkBF,mBAAlB,EAAuCG,OAAvC,CAA+C,UAACC,KAAD,EAAW;AACxD,YAAMC,gBAAgBL,sBAAyBA,mBAAzB,SAAgDI,KAAhD,GAA0DA,KAAhF;AACA,YAAME,oBAAoB,mBAAML,iBAAN,EAAyBG,KAAzB,CAA1B;AACA,YAAIG,QAAQ,IAAZ;AACA,YAAID,iBAAJ,EAAuB;AACrB,cAAI,wBAAWA,iBAAX,CAAJ,EAAmC;AACjCC,oBAAQD,iBAAR;AACD,WAFD,MAEO;AACLC,oBAAQD,kBAAkBC,KAA1B;AACD;AACF;AACD,YAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,iBAAS,mBAAMF,iBAAN,EAAyBG,KAAzB,EAAgCA,KAAhC,CAAT;AAAA,SAAzB;AACA;AACA,YAAMC,cAAcd,OAAOA,MAAP,CAAcS,aAAd,CAApB;AACA,8BAASK,WAAT,EAAsB;AACpBH,iBAAOA,SAAYb,SAAZ,SAAyBW,aADZ;AAEpBM;AACEC,uBAAWJ,gBADb;AAEEX,0BAAcS;AAFhB,aAGKb,UAAUoB,aAAV,CAAwBR,aAAxB,EAAuCM,QAH5C;AAFoB,SAAtB;AAQA;AACA,YAAIf,OAAOM,UAAP,CAAkBG,aAAlB,EAAiCS,MAAjC,GAA0C,CAA9C,EAAiD;AAC/Cf,iCAAuBM,aAAvB,EAAsCC,iBAAtC;AACD;AACF,OA1BD;AA2BD,KA5BD;AA6BAP,2BAAuB,IAAvB,EAA6BF,YAA7B;;AAEA;AACA;AACA;AACAD,WAAOmB,UAAP,CAAkBC,QAAlB,CAA2B,EAAEC,IAAI,4CAA0B1B,KAAKO,CAAL,CAAO,cAAP,CAA1B,CAAN,EAA3B;;AAGA,WAAOF,MAAP;AACD,GA/Cc;AAAA,C","file":"translate_simple_schema.js","sourcesContent":["import _ from 'lodash';\nimport evalSimpleSchemaRegexKeys from './eval_simpleschema_regex_keys';\n\nexport default ({ i18n, SimpleSchema }) => (schemaOrg, namespace) => {\n  if (!SimpleSchema) {\n    throw new Error('please provide SimpleSchema if you want to translate schemas');\n  }\n  // clone the schema\n  const schema = _.cloneDeep(schemaOrg);\n  // translate all the labels\n  const translations = i18n.t(namespace);\n\n  const _translateSchemaObject = (parentFieldFullName = null, parentTranslation = {}) => {\n    schema.objectKeys(parentFieldFullName).forEach((field) => {\n      const fullFieldName = parentFieldFullName ? `${parentFieldFullName}.${field}` : field;\n      const fieldTranslations = _.get(parentTranslation, field);\n      let label = null;\n      if (fieldTranslations) {\n        if (_.isString(fieldTranslations)) {\n          label = fieldTranslations;\n        } else {\n          label = fieldTranslations.label;\n        }\n      }\n      const defaultTransform = value => _.get(fieldTranslations, value, value);\n      // we mutate now the schema\n      const fieldSchema = schema.schema(fullFieldName);\n      _.extend(fieldSchema, {\n        label: label || `${namespace}.${fullFieldName}`,\n        uniforms: {\n          transform: defaultTransform,\n          translations: fieldTranslations,\n          ...schemaOrg.getDefinition(fullFieldName).uniforms, // can override default transform\n        },\n      });\n      // recursivly translate subobjects and subschemas\n      if (schema.objectKeys(fullFieldName).length > 0) {\n        _translateSchemaObject(fullFieldName, fieldTranslations);\n      }\n    });\n  };\n  _translateSchemaObject(null, translations);\n\n  // we do not use the locale feature of simpleschema (yet),\n  // instead we just add the right translations\n  // to the default locale (en) in messagebox\n  schema.messageBox.messages({ en: evalSimpleSchemaRegexKeys(i18n.t('simpleSchema')) });\n\n\n  return schema;\n};\n"]}