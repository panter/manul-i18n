{"version":3,"sources":["../src/import_into_collection.js"],"names":["override","translations","collection","locales","entries","Map","valueKeyForLocale","locale","forEach","translationsForLocale","translationsFlat","value","key","has","set","get","console","log","findOne","update","$set","insert","_id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA;kBACe,YAA6F;AAAA,iFAAP,EAAO;AAAA,2BAA1FA,QAA0F;AAAA,MAA1FA,QAA0F,iCAA/E,KAA+E;AAAA,MAAxEC,YAAwE,QAAxEA,YAAwE;AAAA,MAA1DC,UAA0D,QAA1DA,UAA0D;AAAA,0BAA9CC,OAA8C;AAAA,MAA9CA,OAA8C,gCAApC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAoC;;AAC1G,MAAMC,UAAU,IAAIC,GAAJ,EAAhB;;AAEA,MAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,sBAAmBC,MAAnB;AAAA,GAA1B;AACAJ,UAAQK,OAAR,CAAgB,UAACD,MAAD,EAAY;AAC1B,QAAME,wBAAwBR,aAAaM,MAAb,CAA9B;AACA,QAAI,CAAC,uBAAUE,qBAAV,CAAL,EAAuC;AACrC,UAAMC,mBAAmB,oBAAKD,qBAAL,CAAzB;AACA,6BAAUC,gBAAV,EAA4B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC1C,YAAI,CAACR,QAAQS,GAAR,CAAYD,GAAZ,CAAL,EAAuB;AACrBR,kBAAQU,GAAR,CAAYF,GAAZ,EAAiB,yBACf,mBAAMT,OAAN,EAAe;AAAA,mBAAUG,kBAAkBC,MAAlB,CAAV;AAAA,WAAf,CADe,EAEf,mBAAMJ,OAAN,EAAe;AAAA,mBAAM,IAAN;AAAA,WAAf,CAFe,CAAjB;AAID;AACDC,gBAAQW,GAAR,CAAYH,GAAZ,EAAiBN,kBAAkBC,MAAlB,CAAjB,IAA8CI,KAA9C;AACD,OARD;AASD;AACF,GAdD;;AAgBAK,UAAQC,GAAR,CAAY,uCAAZ;AACA;AArB0G;AAAA;AAAA;;AAAA;AAsB1G,yBAA2Bb,OAA3B,8HAAoC;AAAA;AAAA,UAAxBQ,GAAwB;AAAA,UAAnBD,KAAmB;;AAClC,UAAIT,WAAWgB,OAAX,CAAmBN,GAAnB,CAAJ,EAA6B;AAC3B,YAAIZ,QAAJ,EAAc;AACZE,qBAAWiB,MAAX,CAAkBP,GAAlB,EAAuB,EAAEQ,MAAMT,KAAR,EAAvB;AACAK,kBAAQC,GAAR,CAAY,SAAZ,EAAuBL,GAAvB;AACD,SAHD,MAGO;AACL;AACD;AACF,OAPD,MAOO;AACLV,mBAAWmB,MAAX,YAAoBC,KAAKV,GAAzB,IAAiCD,KAAjC;AACAK,gBAAQC,GAAR,CAAY,UAAZ,EAAwBL,GAAxB;AACD;AACF;AAlCyG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmC3G,C","file":"import_into_collection.js","sourcesContent":["\nimport _ from 'lodash';\nimport flat from 'flat';\n\n/* eslint no-shadow: 0*/\nexport default ({ override = false, translations, collection, locales = ['de', 'en', 'it', 'fr'] } = {}) => {\n  const entries = new Map();\n\n  const valueKeyForLocale = locale => `value_${locale}`;\n  locales.forEach((locale) => {\n    const translationsForLocale = translations[locale];\n    if (!_.isEmpty(translationsForLocale)) {\n      const translationsFlat = flat(translationsForLocale);\n      _.forEach(translationsFlat, (value, key) => {\n        if (!entries.has(key)) {\n          entries.set(key, _.zipObject(\n            _.map(locales, locale => valueKeyForLocale(locale)),\n            _.map(locales, () => null),\n          ));\n        }\n        entries.get(key)[valueKeyForLocale(locale)] = value;\n      });\n    }\n  });\n\n  console.log('--- importing i18n into collection --');\n  /* eslint no-restricted-syntax: 0*/\n  for (const [key, value] of entries) {\n    if (collection.findOne(key)) {\n      if (override) {\n        collection.update(key, { $set: value });\n        console.log('updated', key);\n      } else {\n        // console.log('skipped', key);\n      }\n    } else {\n      collection.insert({ _id: key, ...value });\n      console.log('inserted', key);\n    }\n  }\n};\n"]}