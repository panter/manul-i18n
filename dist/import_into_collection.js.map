{"version":3,"sources":["../src/import_into_collection.js"],"names":["override","translations","collection","locales","verbose","entries","valueKeyForLocale","locale","forEach","translationsForLocale","translationsFlat","value","key","has","set","get","console","log","findOne","update","$set","insert","_id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAEA;AACA;kBACe,YAMJ;AAAA,iFAAP,EAAO;AAAA,2BALTA,QAKS;AAAA,MALTA,QAKS,iCALE,KAKF;AAAA,MAJTC,YAIS,QAJTA,YAIS;AAAA,MAHTC,UAGS,QAHTA,UAGS;AAAA,0BAFTC,OAES;AAAA,MAFTA,OAES,gCAFC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAED;AAAA,0BADTC,OACS;AAAA,MADTA,OACS,gCADC,IACD;;AACT,MAAMC,UAAU,mBAAhB;;AAEA,MAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,sBAAmBC,MAAnB;AAAA,GAA1B;AACAJ,UAAQK,OAAR,CAAgB,kBAAU;AACxB,QAAMC,wBAAwBR,aAAaM,MAAb,CAA9B;AACA,QAAI,CAAC,uBAAUE,qBAAV,CAAL,EAAuC;AACrC,UAAMC,mBAAmB,oBAAKD,qBAAL,CAAzB;AACA,6BAAUC,gBAAV,EAA4B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC1C,YAAI,CAACP,QAAQQ,GAAR,CAAYD,GAAZ,CAAL,EAAuB;AACrBP,kBAAQS,GAAR,CACEF,GADF,EAEE,yBACE,mBAAMT,OAAN,EAAe;AAAA,mBAAUG,kBAAkBC,MAAlB,CAAV;AAAA,WAAf,CADF,EAEE,mBAAMJ,OAAN,EAAe;AAAA,mBAAM,IAAN;AAAA,WAAf,CAFF,CAFF;AAOD;AACDE,gBAAQU,GAAR,CAAYH,GAAZ,EAAiBN,kBAAkBC,MAAlB,CAAjB,IAA8CI,KAA9C;AACD,OAXD;AAYD;AACF,GAjBD;;AAmBAK,UAAQC,GAAR,CAAY,uCAAZ;AACA;AAxBS;AAAA;AAAA;;AAAA;AAyBT,oDAA2BZ,OAA3B,4GAAoC;AAAA;AAAA,UAAxBO,GAAwB;AAAA,UAAnBD,KAAmB;;AAClC,UAAIT,WAAWgB,OAAX,CAAmBN,GAAnB,CAAJ,EAA6B;AAC3B,YAAIZ,QAAJ,EAAc;AACZE,qBAAWiB,MAAX,CAAkBP,GAAlB,EAAuB,EAAEQ,MAAMT,KAAR,EAAvB;AACA,cAAIP,OAAJ,EAAa;AACXY,oBAAQC,GAAR,CAAY,SAAZ,EAAuBL,GAAvB;AACD;AACF,SALD,MAKO,IAAIR,OAAJ,EAAa;AAClBY,kBAAQC,GAAR,CAAY,SAAZ,EAAuBL,GAAvB;AACD;AACF,OATD,MASO;AACLV,mBAAWmB,MAAX,0BAAoBC,KAAKV,GAAzB,IAAiCD,KAAjC;AACA,YAAIP,OAAJ,EAAa;AACXY,kBAAQC,GAAR,CAAY,UAAZ,EAAwBL,GAAxB;AACD;AACF;AACF;AAzCQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CV,C","file":"import_into_collection.js","sourcesContent":["import _ from \"lodash\";\nimport flat from \"flat\";\n\n/* eslint no-shadow: 0 */\n/* eslint-disable no-console */\nexport default ({\n  override = false,\n  translations,\n  collection,\n  locales = [\"de\", \"en\", \"it\", \"fr\"],\n  verbose = true\n} = {}) => {\n  const entries = new Map();\n\n  const valueKeyForLocale = locale => `value_${locale}`;\n  locales.forEach(locale => {\n    const translationsForLocale = translations[locale];\n    if (!_.isEmpty(translationsForLocale)) {\n      const translationsFlat = flat(translationsForLocale);\n      _.forEach(translationsFlat, (value, key) => {\n        if (!entries.has(key)) {\n          entries.set(\n            key,\n            _.zipObject(\n              _.map(locales, locale => valueKeyForLocale(locale)),\n              _.map(locales, () => null)\n            )\n          );\n        }\n        entries.get(key)[valueKeyForLocale(locale)] = value;\n      });\n    }\n  });\n\n  console.log(\"--- importing i18n into collection --\");\n  /* eslint no-restricted-syntax: 0*/\n  for (const [key, value] of entries) {\n    if (collection.findOne(key)) {\n      if (override) {\n        collection.update(key, { $set: value });\n        if (verbose) {\n          console.log(\"updated\", key);\n        }\n      } else if (verbose) {\n        console.log(\"skipped\", key);\n      }\n    } else {\n      collection.insert({ _id: key, ...value });\n      if (verbose) {\n        console.log(\"inserted\", key);\n      }\n    }\n  }\n};\n"]}