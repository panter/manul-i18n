{"version":3,"sources":["../src/i18n_service.js"],"names":[],"mappings":"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","file":"i18n_service.js","sourcesContent":["/**\navailable in context as i18n.\n\ni18n.t(key, props): translate the given key (caution: only reactive in tracker-komposer)\n\n**/\nimport _ from 'lodash';\n\n\nclass I18nClient {\n\n  constructor({\n    translationStore, // mandatory\n    supportedLocales = ['en'],\n    defaultLocale = 'en',\n    // whether it should use fallback locale if translation is missing\n    // the rule is the following: xx_XX --> xx --> defaultLocale\n    useFallbackForMissing = true,\n\n    // pass function as isEditMode that uses a reactive data-source\n    // if you do so and it changes to true,\n    // all of your translations will show their keys\n    // also, if you click on one of your translations (via T),\n    // editTranslationAction will be called\n    isEditMode = () => false,\n    editTranslationAction = (translationId) => {\n      /* eslint no-console: 0*/\n      console.log('define editTranslationAction in I18nConstructor');\n      console.log('you can define a mantra-action (string)');\n      console.log('or you can define a function');\n      console.log(`would edit ${translationId}`);\n    },\n    // shouldShowKeysAsFallback defines whether it should show the keys of translation\n    // if the translation is not available (can also be reactive datasource)\n    // this is usefull for admins and/or in development-environement\n    shouldShowKeysAsFallback = () => false,\n    }) {\n    this.translationStore = translationStore;\n    this.isEditMode = isEditMode;\n    this.shouldShowKeysAsFallback = shouldShowKeysAsFallback;\n    this.editTranslationAction = editTranslationAction;\n    this.useFallbackForMissing = useFallbackForMissing;\n    this.supportedLocales = supportedLocales;\n    this.defaultLocale = defaultLocale;\n    this.changeCallbacks = [];\n    this.setLocale(defaultLocale);\n  }\n\n  t(keyOrNamespace, props, { disableEditorBypass = false } = {}) {\n    if (!keyOrNamespace) {\n      return '! no translationId given !';\n    }\n    if (!disableEditorBypass && this.isEditMode()) {\n      return keyOrNamespace;\n    }\n    let translation = this.translationStore.translate(keyOrNamespace, props);\n    if (!_.isNil(translation)) {\n      return translation;\n    }\n    const fallbackLocale = this.getFallbackLocale();\n    if (this.useFallbackForMissing && this.getLocale() !== fallbackLocale) {\n      translation = this.translationStore.translate(\n          keyOrNamespace, { ...props, _locale: fallbackLocale },\n        );\n    }\n      // if still nil and is editor, return key if allowed\n    if (!_.isNil(translation)) {\n      return translation;\n    } else if (this.shouldShowKeysAsFallback()) {\n      return keyOrNamespace;\n    }\n    return null; // we tried :-(\n  }\n\n  /**\n    translate a certain property from a document.\n    It will check if the document has doc[propertyKey].de, .fr, etc.\n\n    if propertyKey is not set, it will fetch doc.de, doc.fr, etc.\n  **/\n  tDoc(doc, propertyKey = null) {\n    // closure helpers\n    const path = locale => (propertyKey ? `${propertyKey}.${locale}` : locale);\n    const t = locale => _.get(doc, path(locale));\n\n    const translation = t(this.getLocale());\n    if (!_.isNil(translation)) {\n      return translation;\n    }\n    const fallbackLocale = this.getFallbackLocale();\n    if (this.useFallbackForMissing && this.getLocale() !== fallbackLocale) {\n      return t(fallbackLocale);\n    }\n    return null; // no key fallback at the moment\n  }\n\n  supports(locale) {\n    return this.supportedLocales.indexOf(locale) !== -1;\n  }\n\n  getFallbackLocale(locale) {\n    if (!locale) {\n      return this.defaultLocale;\n    } else if (this.supports(locale)) {\n      return locale;\n    }\n    const [lang] = locale.split('-');\n    if (this.supports(lang)) {\n      return lang;\n    }\n    return this.defaultLocale;\n  }\n\n\n  setLocale(locale) {\n    const fallbackLocale = this.getFallbackLocale(locale);\n    this.translationStore.setLocale(fallbackLocale);\n    this.changeCallbacks.forEach(callback => callback(fallbackLocale));\n  }\n  getLocale() {\n    return this.translationStore.getLocale();\n  }\n\n  getSupportedLocales() {\n    return this.supportedLocales;\n  }\n\n  onChangeLocale(callback) {\n    this.changeCallbacks.push(callback);\n  }\n\n}\n\n\nexport default I18nClient;\n"]}