{"version":3,"sources":["../src/with_translated_schema.js"],"names":["composer","onData","context","props","i18n","SimpleSchema","require","default","e","Error","mapping","mappingArrayOrFunction","translateSimpleSchemaFunc","version","translatedProps","namespace","propName"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AAEA;;;;AACA;;;;;;;;AACA;;;;;;;AAOO,IAAMA,WAAW,SAAXA,QAAW;AAAA,SAA0B,gBAAwBC,MAAxB,EAAmC;AAAA,QAAhCC,OAAgC,QAAhCA,OAAgC;AAAA,QAApBC,KAAoB;;AAAA,mBAClED,SADkE;AAAA,QAC3EE,IAD2E,YAC3EA,IAD2E;;AAGnF,QAAIC,qBAAJ;AACA,QAAI;AACF;AACA;AACA;AACAA,qBAAeC,QAAQ,cAAR,EAAwBC,OAAvC;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACZ;AACEH,qBAAeH,UAAUG,YAAzB;AACD;AACD,QAAI,CAACA,YAAL,EAAmB;AACjB,YAAM,IAAII,KAAJ,CAAU,kGAAV,CAAN;AACD;;AAED,QAAIC,UAAUC,sBAAd;AACA,QAAI,0BAAaA,sBAAb,CAAJ,EAA0C;AACxCD,gBAAUC,kCAAyBT,gBAAzB,IAAqCC,KAArC,EAAV;AACD;AACD,QAAMS,4BACJP,aAAaQ,OAAb,KAAyB,CAAzB,yEADF;AAKA,QAAMC,kBAAkB,yBACtBJ,OADsB,EAEtB,UAACK,SAAD,EAAYC,QAAZ;AAAA,aACEJ,0BAA0B,EAAER,UAAF,EAAQC,0BAAR,EAA1B,EAAkDF,MAAMa,QAAN,CAAlD,EAAmED,SAAnE,CADF;AAAA,KAFsB,CAAxB;AAMAd,WAAO,IAAP,eAAkBE,KAAlB,EAA4BW,eAA5B;AACD,GAjCuB;AAAA,CAAjB;;;;kBAmCQ;AAAA,SAAW,oCAAmBd,SAASU,OAAT,CAAnB,CAAX;AAAA,C","file":"with_translated_schema.js","sourcesContent":["import _ from 'lodash';\nimport { composeWithTracker } from 'mantra-core';\n\nimport translateSimpleSchema from './translate_simple_schema';\nimport translateSimpleSchemaLegacy from './translate_simple_schema_1';\n/**\n  withTranslatedSchema is a composer that translates the given schemas using .\n  Pass a mapping-object where the keys are the properties containing these schemas\n  and the values of the object are the i18n-namespaces\n\n  e.g. withTranslatedSchema({companySchema: \"companies\"})\n*/\nexport const composer = mappingArrayOrFunction => ({ context, ...props }, onData) => {\n  const { i18n } = context();\n\n  let SimpleSchema;\n  try {\n    // try load simpleSchema form npm\n    /* eslint global-require: 0 */\n    /* eslint import/no-unresolved: 0 */\n    SimpleSchema = require('simpl-schema').default;\n  } catch (e) {\n  // load from context\n    SimpleSchema = context().SimpleSchema;\n  }\n  if (!SimpleSchema) {\n    throw new Error('Please provice SimpleSchema as npm module (recomended) or in context to use withTranslatedSchema');\n  }\n\n  let mapping = mappingArrayOrFunction;\n  if (_.isFunction(mappingArrayOrFunction)) {\n    mapping = mappingArrayOrFunction({ context, ...props });\n  }\n  const translateSimpleSchemaFunc = (\n    SimpleSchema.version === 2 ?\n    translateSimpleSchema :\n    translateSimpleSchemaLegacy\n  );\n  const translatedProps = _.mapValues(\n    mapping,\n    (namespace, propName) => (\n      translateSimpleSchemaFunc({ i18n, SimpleSchema })(props[propName], namespace)\n    ),\n  );\n  onData(null, { ...props, ...translatedProps });\n};\n\nexport default mapping => composeWithTracker(composer(mapping));\n"]}