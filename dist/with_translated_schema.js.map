{"version":3,"sources":["../src/with_translated_schema.js"],"names":["composer","onData","context","props","i18n","SimpleSchema","require","default","e","Error","mapping","mappingArrayOrFunction","translateSimpleSchemaFunc","version","translatedProps","namespace","propName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AACA;;;;;;;AAOO,IAAMA,WAAW,SAAXA,QAAW;AAAA,SAA0B,gBAEhDC,MAFgD,EAG7C;AAAA,QAFDC,OAEC,QAFDA,OAEC;AAAA,QAFWC,KAEX;;AAAA,mBACcD,SADd;AAAA,QACKE,IADL,YACKA,IADL;;AAGH,QAAIC,qBAAJ;AACA,QAAI;AACF;AACA;AACA;AACAA,qBAAeC,QAAQ,cAAR,EAAwBC,OAAvC;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACV;AACAH,qBAAeH,UAAUG,YAAzB;AACD;AACD,QAAI,CAACA,YAAL,EAAmB;AACjB,YAAM,IAAII,KAAJ,CACJ,kGADI,CAAN;AAGD;;AAED,QAAIC,UAAUC,sBAAd;AACA,QAAI,0BAAaA,sBAAb,CAAJ,EAA0C;AACxCD,gBAAUC,gDAAyBT,gBAAzB,IAAqCC,KAArC,EAAV;AACD;AACD,QAAMS,4BACJP,aAAaQ,OAAb,KAAyB,CAAzB,yEADF;AAIA,QAAMC,kBAAkB,yBAAYJ,OAAZ,EAAqB,UAACK,SAAD,EAAYC,QAAZ;AAAA,aAC3CJ,0BAA0B,EAAER,UAAF,EAAQC,0BAAR,EAA1B,EACEF,MAAMa,QAAN,CADF,EAEED,SAFF,CAD2C;AAAA,KAArB,CAAxB;AAMAd,WAAO,IAAP,6BAAkBE,KAAlB,EAA4BW,eAA5B;AACD,GArCuB;AAAA,CAAjB;;;;kBAuCQ;AAAA,SAAW,kCAAmBd,SAASU,OAAT,CAAnB,CAAX;AAAA,C","file":"with_translated_schema.js","sourcesContent":["import _ from 'lodash';\n\nimport composeWithTracker from './utils/composeWithTracker';\nimport translateSimpleSchema from './translate_simple_schema';\nimport translateSimpleSchemaLegacy from './translate_simple_schema_1';\n/**\n  withTranslatedSchema is a composer that translates the given schemas using .\n  Pass a mapping-object where the keys are the properties containing these schemas\n  and the values of the object are the i18n-namespaces\n\n  e.g. withTranslatedSchema({companySchema: \"companies\"})\n*/\nexport const composer = mappingArrayOrFunction => (\n  { context, ...props },\n  onData\n) => {\n  const { i18n } = context();\n\n  let SimpleSchema;\n  try {\n    // try load simpleSchema form npm\n    /* eslint global-require: 0 */\n    /* eslint import/no-unresolved: 0 */\n    SimpleSchema = require('simpl-schema').default;\n  } catch (e) {\n    // load from context\n    SimpleSchema = context().SimpleSchema;\n  }\n  if (!SimpleSchema) {\n    throw new Error(\n      'Please provice SimpleSchema as npm module (recomended) or in context to use withTranslatedSchema'\n    );\n  }\n\n  let mapping = mappingArrayOrFunction;\n  if (_.isFunction(mappingArrayOrFunction)) {\n    mapping = mappingArrayOrFunction({ context, ...props });\n  }\n  const translateSimpleSchemaFunc =\n    SimpleSchema.version === 2\n      ? translateSimpleSchema\n      : translateSimpleSchemaLegacy;\n  const translatedProps = _.mapValues(mapping, (namespace, propName) =>\n    translateSimpleSchemaFunc({ i18n, SimpleSchema })(\n      props[propName],\n      namespace\n    )\n  );\n  onData(null, { ...props, ...translatedProps });\n};\n\nexport default mapping => composeWithTracker(composer(mapping));\n"]}