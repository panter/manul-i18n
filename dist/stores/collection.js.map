{"version":3,"sources":["../../src/stores/collection.js"],"names":["NonReactiveVar","_value","value","Meteor","Ground","ReactiveVar","collection","publicationName","useMethod","Tracker","subscriptions","Error","locale","isServer","isClient","initClient","initServer","get","set","startSubscription","collectionGrounded","Collection","_name","observeSource","find","call","error","translations","usedIds","forEach","_id","translation","getCollection","upsert","$set","push","e","console","log","remove","$nin","nonreactive","subscribe","keep","that","methods","_translations","fields","getValueKey","fetch","publish","publishTranslations","ready","entry","params","_replaceParamsInString","keyOrNamespace","options","_locale","getLocale","entryByKey","_findEntryForKey","_getValue","entries","_findEntriesForNamespace","fullObject","length","overwrite","objectForNamespace","findOne","namespace","findResultsForNamespace","$regex","string","paramsUnflatted","open","close","replacedString","substitution","param","split","join"],"mappings":"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","file":"collection.js","sourcesContent":["import _ from 'lodash';\nimport { flow, sortBy, keyBy, mapValues } from 'lodash/fp';\n\nimport flat, { unflatten } from 'flat';\n\nclass NonReactiveVar {\n  _value = null;\n\n  set(value) {\n    this._value = value;\n  }\n  get() {\n    return this._value;\n  }\n}\nexport default class {\n  constructor({\n    Meteor,\n    Ground, // optional, enables caching via Ground https://github.com/GroundMeteor/\n    ReactiveVar, // only needed on client\n    collection,\n    publicationName = 'translations',\n\n    // set to true if you are experience high loads. Translations will no longer be reactive if true\n    useMethod = false,\n    Tracker\n  } = {}) {\n    this.Ground = Ground;\n    this.Tracker = Tracker;\n    this.publicationName = publicationName;\n    this.collection = collection;\n    this.Meteor = Meteor;\n    this.ReactiveVar = ReactiveVar;\n    this.useMethod = useMethod;\n    this.subscriptions = {};\n    if (this.useMethod && !Ground) {\n      throw new Error('please use ground-collection if using method calls');\n    }\n    this.locale = this.Meteor.isServer\n      ? new NonReactiveVar()\n      : new this.ReactiveVar();\n    if (Meteor.isClient) {\n      this.initClient();\n    } else {\n      this.initServer();\n    }\n  }\n\n  getLocale() {\n    return this.locale.get();\n  }\n\n  setLocale(locale) {\n    this.locale.set(locale);\n    this.startSubscription(locale); // restart\n  }\n\n  initClient() {\n    if (this.Ground) {\n      this.collectionGrounded = new this.Ground.Collection(\n        `${this.collection._name}-grounded`\n      );\n      if (!this.useMethod) {\n        this.collectionGrounded.observeSource(this.collection.find());\n      }\n    }\n  }\n\n  startSubscription(locale) {\n    if (this.Meteor.isServer) {\n      return;\n    }\n    if (!locale || this.subscriptions[locale]) {\n      return; // do not resubscribe;\n    }\n    if (this.useMethod) {\n      this.subscriptions[locale] = true;\n      this.Meteor.call('_translations', locale, (error, translations) => {\n        if (!error) {\n          const usedIds = [];\n          translations.forEach(({ _id, ...translation }) => {\n            try {\n              this.getCollection().upsert({ _id }, { $set: translation });\n              usedIds.push(_id);\n            } catch (e) {\n              // some upserts might throw error (if id is accidentaly an objectid)\n              console.log(e);\n            }\n          });\n          this.getCollection().remove({ _id: { $nin: usedIds } });\n        }\n      });\n    } else {\n      this.Tracker.nonreactive(() => {\n        // we keep all old subscription, so no stop or tracker here\n        this.subscriptions[locale] = this.Meteor.subscribe(\n          this.publicationName,\n          locale,\n          () => {\n            if (this.collectionGrounded) {\n              // reset and keep only new ones\n              this.collectionGrounded.keep(this.collection.find());\n            }\n          }\n        );\n      });\n    }\n  }\n\n  initServer() {\n    const that = this;\n    this.Meteor.methods({\n      _translations(locale) {\n        return that.collection\n          .find({}, { fields: { [that.getValueKey(locale)]: true } })\n          .fetch();\n      }\n    });\n    this.Meteor.publish(this.publicationName, function publishTranslations(\n      locale\n    ) {\n      if (!locale) {\n        this.ready();\n        return null;\n      }\n\n      return that.collection.find(\n        {},\n        { fields: { [that.getValueKey(locale)]: true } }\n      );\n    });\n  }\n\n  /* eslint class-methods-use-this: 0*/\n  getValueKey(locale) {\n    return `value_${locale}`;\n  }\n  _getValue(entry, locale, params) {\n    if (_.has(entry, this.getValueKey(locale))) {\n      return this._replaceParamsInString(\n        _.get(entry, this.getValueKey(locale)),\n        params\n      );\n    }\n    return null;\n  }\n\n  translate(keyOrNamespace, options = {}) {\n    const { _locale = this.getLocale(), ...params } = options;\n    // if locale is different (e.g. fallback), subscribe to that locale as well\n    // so that it will be available soon\n    if (this.Meteor.isClient && _locale !== this.getLocale()) {\n      this.startSubscription(_locale);\n    }\n    if (!keyOrNamespace) {\n      return '';\n    }\n\n    const entryByKey = this._findEntryForKey(keyOrNamespace);\n\n    if (entryByKey) {\n      return this._getValue(entryByKey, _locale, params);\n    } else if (\n      this.useMethod ||\n      this.Meteor.isServer ||\n      this.Meteor.isClient\n      // || this.subscriptions[_locale].ready()\n    ) {\n      // try to find for namespace\n      // this is expensive, so we do it only if subscription is ready\n      const entries = this._findEntriesForNamespace(keyOrNamespace);\n      const fullObject = unflatten(\n        flow(\n          sortBy(({ _id }) => _id.length),\n          keyBy('_id'),\n          mapValues(entry => this._getValue(entry, _locale, params))\n        )(entries),\n        { overwrite: true }\n      );\n      const objectForNamespace = _.get(fullObject, keyOrNamespace);\n      if (_.isEmpty(objectForNamespace)) {\n        return null;\n      }\n      return objectForNamespace;\n    }\n    return null;\n  }\n  getCollection() {\n    return this.collectionGrounded || this.collection;\n  }\n  has(keyOrNamespace) {\n    return this.getCollection().findOne(keyOrNamespace);\n  }\n  hasObject(namespace) {\n    return this.findResultsForNamespace(namespace).length > 1;\n  }\n\n  /**\n  returns either one or multiple results\n  multiple results means that an namespace was requested\n  **/\n  _findEntryForKey(keyOrNamespace) {\n    return this.getCollection().findOne(keyOrNamespace);\n  }\n\n  _findEntriesForNamespace(namespace) {\n    // console.log('doing expensive fetch', namespace);\n    return this.getCollection()\n      .find({ _id: { $regex: `^${namespace}` } })\n      .fetch();\n  }\n\n  _replaceParamsInString(string, paramsUnflatted) {\n    // flat params if not flat\n    const params = flat(paramsUnflatted);\n    const open = '{$';\n    const close = '}';\n    let replacedString = string;\n    Object.keys(params).forEach(param => {\n      const substitution = _.get(params, param, '');\n      replacedString = replacedString\n        .split(open + param + close)\n        .join(substitution);\n    });\n    return replacedString;\n  }\n}\n"]}